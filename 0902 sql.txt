-- system 계정은 오라클 데이터베이스를 유지,보수,관리할 때 사용하는 사용자 계정이며,
-- SYS 사용자와 차이점은 데이터베이스를 생성할 수 있는 권한이 없으면 불완전 복구를 할 수 없다.
show user;

select * from tab;
-- 작성된 테이블 목록 확인

-- DUAL 테이블이란 ?
-- DUAL 테이블은 바로 산술 연산의 결과를 한 줄로 얻기 위해서 오라클에서 제공하는 테이블
select * from DUAL;
-- DUAL 테이블은 사용자가 함수(계산)를 실행할 때 임시로 사용하는데 적합
-- 함수에 대한 쓰임을 알고 싶을 때 특정 테이블을 생성할 필요 없이 dual 테이블을 이용하여
-- 함수의 값을 return 받을 수 있다.
select 24*60 from DUAL;
-- DUAL 테이블을 이용하여 24*60 값 리턴.

desc emp;
-- 테이블 구조

-- 데이터 타입
-- CHAR 데이터 타입 : 고정길이 데이터 타입
-- name이란 칼럼을 CHAR(10)으로 데이터 타입을 지정한 후에
-- 'oracle'이라는 데이터를 저장하였다면 다음과 같이 지정된 길이보다 짧은
-- 데이터가 입력되었기 때문에 나머지 공간이 공백으로 채워짐

-- VARCHAR2 데이터 타입 : 가변길이 데이터 타입
-- VARCHAR2 역시 문자 데이터를 저장하기 위한 데이터 타입으로 가변적인 길이의 문자열을 저장
-- name 칼럼을 VARCHAR2(50)이라고 설정하였더라도 'oracle'이란 데이터를 저장한다면
-- 저장할 데이터의 길이에 의해서 저장 공간의 길이가 자동 할당됨

-- NUMBER 데이터 타입
-- NUMBER는 10이나 12.3과 같은 수치 데이터를 저장하며 다음과 같은 형식으로 사용됨
-- EX) NUMBER(8) 하나만 지정하면 정수 값만 지정됨
--     NUMBER(precision, scale)     ex> NUMBER(8,2)
--     precision(정밀도) : 최대 유효숫자 자리수
--     scale(크기) : 소수점 기준 자리수
--     둘 다 지정하면 실수 형태의 값으로 저장됨. 12345678.09

-- BLOB : 대용량의 바이너리 데이터를 저장하기 위한 타입 최대 크기 4GB   ->  BFILE
-- CLOB : 대용량의 텍스트 데이터를 저장하기 위한 타입 최대 크기 4GB

-- ROWID : 테이블 내 행의 고유 주소를 가지는 64진수 문자 타입 --> 검색이 가능

-- 데이터 무결성과 제약 조건
-- NOT NULL 제약 조건
-- NULL은 할당 받지 않은 값, 아직 무엇인지 모르는 값을 의미
-- 이상(anomaly) 현상이 일어나지 않도록 하기 위한 방법으로 제공되는 것이 바로 기본 키
-- 기본 키로 지정한 칼럼은 NULL 값이나 중복된 값을 가질 수 없기 때문에 개체가 무결성을 유지

-- 외래 키(Foreign Key) 제약 조건
-- 관계형 데이터베이스는 데이터가 중복되어 저장하는 것을 지양
-- 모 회사의 사원이 어느 부서에 소속되어 있는지에 대한 정보를 저장한 테이블

-- 부서 테이블 제거하기
DROP TABLE EMP;
-- 사원 테이블 제거하기
DROP TABLE DEPT;
-- 급여 테이블 제거하기
DROP TABLE SALGRADE;

DROP TABLE EMPLOYEE;

DROP TABLE DEPARTMENT;

-- 부서 테이블 생성하기
CREATE TABLE DEPT(
	 DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
	 DNAME VARCHAR2(14),
	 LOC   VARCHAR2(13) ) ;

-- 사원 테이블 생성하기
CREATE TABLE EMP( 
  	 EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
	 ENAME VARCHAR2(10),
 	 JOB   VARCHAR2(9),
	 MGR  NUMBER(4),
	 HIREDATE DATE,
	 SAL NUMBER(7,2),
	 COMM NUMBER(7,2),
	 DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);

 -- 급여 테이블 생성하기
CREATE TABLE SALGRADE(
	 GRADE NUMBER,
	 LOSAL NUMBER,
	 HISAL NUMBER );

-- 부서 테이블에 샘플 데이터 추가하기
INSERT INTO DEPT VALUES(10, '경리부', '서울');
INSERT INTO DEPT VALUES(20, '인사부', '인천');
INSERT INTO DEPT VALUES(30, '영업부', '용인'); 
INSERT INTO DEPT VALUES(40, '전산부', '수원');

-- 사원 테이블에 샘플 데이터 추가하기
INSERT INTO EMP VALUES(1001, '김사랑', '사원', 1013, to_date('2007-03-01','yyyy-mm-dd'), 300, NULL, 20);
INSERT INTO EMP VALUES(1002, '한예슬', '대리', 1005, to_date('2007-04-02','yyyy-mm-dd'), 250,   80, 30);
INSERT INTO EMP VALUES(1003, '오지호', '과장', 1005, to_date('2005-02-10','yyyy-mm-dd'), 500,  100, 30);
INSERT INTO EMP VALUES(1004, '이병헌', '부장', 1008, to_date('2003-09-02','yyyy-mm-dd'), 600, NULL, 20);
INSERT INTO EMP VALUES(1005, '신동엽', '과장', 1005, to_date('2005-04-07','yyyy-mm-dd'), 450,  200, 30);
INSERT INTO EMP VALUES(1006, '장동건', '부장', 1008, to_date('2003-10-09','yyyy-mm-dd'), 480, NULL, 30);
INSERT INTO EMP VALUES(1007, '이문세', '부장', 1008, to_date('2004-01-08','yyyy-mm-dd'), 520, NULL, 10);
INSERT INTO EMP VALUES(1008, '감우성', '차장', 1003, to_date('2004-03-08','yyyy-mm-dd'), 500,    0, 30);
INSERT INTO EMP VALUES(1009, '안성기', '사장', NULL, to_date('1996-10-04','yyyy-mm-dd'),1000, NULL, 20);
INSERT INTO EMP VALUES(1010, '이병헌', '과장', 1003, to_date('2005-04-07','yyyy-mm-dd'), 500, NULL, 10);
INSERT INTO EMP VALUES(1011, '조향기', '사원', 1007, to_date('2007-03-01','yyyy-mm-dd'), 280, NULL, 30);
INSERT INTO EMP VALUES(1012, '강혜정', '사원', 1006, to_date('2007-08-09','yyyy-mm-dd'), 300, NULL, 20);
INSERT INTO EMP VALUES(1013, '박중훈', '부장', 1003, to_date('2002-10-09','yyyy-mm-dd'), 560, NULL, 20);
INSERT INTO EMP VALUES(1014, '조인성', '사원', 1006, to_date('2007-11-09','yyyy-mm-dd'), 250, NULL, 10);

-- 급여 테이블에 샘플 데이터 추가하기
INSERT INTO SALGRADE VALUES (1, 700,1200);
INSERT INTO SALGRADE VALUES (2, 1201,1400);
INSERT INTO SALGRADE VALUES (3, 1401,2000);
INSERT INTO SALGRADE VALUES (4, 2001,3000);
INSERT INTO SALGRADE VALUES (5, 3001,9999);
COMMIT;

DESC emp;

-- 테이블 구조를 살펴보기 위한 DESC
-- (1) 테이블에서 데이터를 조회하기 위해서는 테이블의 구조를 알아야 한다.
-- (2) 테이블의 구조를 확인하기 위한 명령어로는 DESCRIBE가 있다.
-- (3) DESC 명령어는 테이블의 칼럼명, 데이터 타입, 길이와 NULL 허용 유무 등과 같은 특정 테이블의 정보를 알려준다

SELECT * FROM EMP;      -- 사원 테이블 조회

SELECT EMPNO, ENAME FROM EMP;       -- 사원 테이블에서 EMPNO, ENAME 조회

-- 연봉 구하기(FEAT. 별칭)
SELECT ENAME, SAL*12 연봉 FROM EMP;
SELECT ENAME, SAL*12 ANNUAL FROM EMP;
SELECT DEPTNO AS "부서번호", DNAME "부서명" FROM DEPT;
-- 칼럼 이름에 별칭 지정해서 출력하기 FROM DEPT(부서 테이블)
SELECT ENAME, SAL*12 AS 연봉 FROM EMP;
-- AS로 칼럼에 별칭 부여
-- 칼럼명 대신 별칭을 출력하고자 하면 칼럼을 기술한 바로 뒤에 AS라는 키워드를 쓴 후 별칭 기술
SELECT ENAME, SAL*12+NVL(COMM,0) "A N N U A L !" FROM EMP;
-- 공백, 특수문자 반영 됨

-- SELECT는 데이터베이스 내에 저장되어 있는 테이블을 조회하기 위한 명령어
-- SELECT 다음에는 보고자 하는 대상의 칼럼명을 기술
-- SELECT 다음에 *을 기술하면 지정된 테이블의 모든 칼럼 조회
-- FROM 다음에는 보고자 하는 대상의 테이블 이름 기술

SELECT ENAME, SALARY*12+NVL(COMMISSION, 0) AS 연봉 FROM EMP;
-- 안되는 이유 : SALARY, COMMISSION은 선언하지 않은 변수
SELECT ENAME, SAL*12+NVL(COMM, 0) AS 연봉 FROM EMP;
-- SAL, COMM 으로 변환하면 오류 안 뜸

-- NVL(EXPR1, EXPR2)
-- EXPR1이 NULL인 경우 EXPR2를 출력,
-- NULL이 아니면 원래 값(EXPR1) 그대로 출력
-- EXPR1, EXPR2의 데이터 타입이 서로 다르면 EXPR1의 데이터 타입 리턴

SELECT ENAME, SAL, JOB, SAL*12, SAL*12+COMM, COMM, DEPTNO FROM EMP;

SELECT DEPTNO FROM EMP;

SELECT DISTINCT DEPTNO FROM EMP;
-- 중복된 데이터를 한번씩만 출력하게 하는 DISTINCT

-- 오라클에서는 여러 개의 칼럼을 연결할 때 사용하기 위해 CONCATENATION(|) 연산자 사용
SELECT ENAME || '의 직급은 ' || JOB || '입니다.' AS "직급" FROM EMP;

-- EMP 테이블에서 SAL >= 500 조회
SELECT * FROM EMP WHERE SAL >= 500;

-- ^=       !=      <>      : 같지 않다는 뜻
SELECT * FROM EMP WHERE SAL ^= 500;
SELECT * FROM EMP WHERE SAL != 500;
SELECT * FROM EMP WHERE SAL <> 500;

-- WHERE NOT
SELECT * FROM EMP WHERE NOT DEPTNO = 10;

-- 이문세라는 이름을 가진 사람 조회
SELECT * FROM EMP WHERE ENAME = '이문세';

-- INVALID IDENTIFIER 부정확한 식별자
-- 특정 조건의 데이터만 조회하는 WHERE 조건
-- 원하는 ROW만 얻으려면 ROW를 제한하는 조건을 SELECT 문에
-- WHERE 절을 추가하여 제시해야 함

--입사일이 2005/03/20 이전인 사람 조회
SELECT *
FROM EMP
WHERE HIREDATE < TO_DATE ('2005-03-20', 'yyyy-mm-dd');

-- TO_DATE('문자열', '날짜 포맷')
-- 문자열을 날짜 데이터로 바꾸는 함수
-- 문자열이 작성된 형식과 날짜 포맷 형식을 똑같이 맞춰줘야 함

-- 문) EMP 테이블로부터 조건절에서 부서번호가 10인 ROW를 조회하세요.
SELECT *
FROM EMP
WHERE DEPTNO = 10;

-- 문) 비교 및 논리 연산자를 사용하여 10번 부서이고, 직급이 과장인 사람을 조회해보세요.
SELECT ENAME
FROM EMP
WHERE DEPTNO = 10 AND JOB = '과장';

-- 논리연산자
-- 조건을 여러 개 조합해서 결과를 얻어야 할 경우에는 조건을 연결해 주는 논리 연산자를 사용
-- 오라클에서 사용 가능한 논리 연산자 : AND, OR, NOT

-- BETWEEN A AND B 연산자
-- 특정 범위 내에 속하는 데이터인지 알아보기 위해
-- 비교연산자와 논리연산자를 결합하여 표현할 수 있음
-- COLUMN_NAME BETWEEN A AND B;

-- 문) 급여가 400 ~ 500인 사원 조회
SELECT ENAME
FROM EMP
WHERE SAL BETWEEN 400 AND 500;

-- IN 연산자
-- COLUMN_NAME IN(A, B, C);
-- 특정 필드의 값이 A이거나 B이거나 C인 모두를 조회

-- 문) IN 연산자를 사용하여 커미션이 80이거나 100이거나 200인 사원 조회
SELECT *
FROM EMP
WHERE COMM IN(80, 100, 200);

-- 문) HIREDATE와 BETWEEN을 사용하여 2003년에 입사한 직원을 조회
-- HIREDATE 출력 형식 = YYYY/MM/DD
SELECT *
FROM EMP
WHERE HIREDATE BETWEEN (TO_DATE('2003/01/01', 'YYYY/MM/DD')) AND (TO_DATE('2003/12/31', 'YYYY/MM/DD'));

-- SELECT *
-- FROM EMP
-- WHERE COMM !=80 AND COMM <> 100 AND COMM ^= 200;
-- 문) 위의 결과와 같게 IN 연산자를 사용하여 출력해보세요.
SELECT *
FROM EMP
WHERE NOT COMM IN(80, 100, 200);

---------------------------09/02------------------------------------------------

-- LIKE 연산자와 와일드카드
-- COLUMN_NAME LIKE PATTERN
-- LIKE 다음에는 PATTERN을 기술해야 하는데 PATTERN에
-- 다음과 같이 두 가지 와일드 카드가 사용
-- % : 문자가 없거나, 하나 이상의 문자가 어떤 값이 와도 상관 없다.
-- _ : 하나의 문자가 어떤 값이 와도 상관 없다.

-- 문) 이씨 성을 LIKE를 이용하여 이름을 출력해보세요.
SELECT *
FROM EMP
WHERE ENAME LIKE '이%';

-- '%라면' : 앞에 무슨 글자가 오던지 '라면'으로 끝나는 문자가 있는 ROW 출력
--      EX) 진라면, 신라면 ...
-- '라면%' : 뒤에       "       '라면'으로 시작하는 문자가 있는 ROW 출력
--      EX) 라면볶이 ...
-- '%라면%' : 앞뒤에 무슨 글자가 오던지 '라면'이라는 문자가 있는 ROW 출력
--      EX) 짜장라면, 라면, 진라면 큰컵, 라면볶이 ...
-- '_라면%' : 뒤에는 아무 글자가 와도 상관 없이 맨 앞에 한 글자 뒤에 '라면' 글자가 있는 ROW 출력
--      EX) 진라면 큰컵 ...
-- '__라면%' : 맨 앞에 두 글자 뒤에 라면 글자가 있는 ROW 출력
--      EX) 짜장라면 ...
-- '라면' : '라면' 문자 그대로 가진 ROW만 출력

-- 문) '성'이 아무데나 들어가기만 해도 되는 이름을 조회해보세요.
SELECT *
FROM EMP
WHERE ENAME LIKE '%성%';

-- 문) '성'이 맨 뒤에만 들어가는 이름을 출력해보세요.
SELECT *
FROM EMP
WHERE ENAME LIKE '%성';

-- 문) '성'이 가운데만 들어가는 이름을 출력해보세요.
SELECT *
FROM EMP
WHERE ENAME LIKE '_성_';

-- 문) '성'이 가운데에 안들어가는 이름을 출력해보세요.
SELECT *
FROM EMP
WHERE NOT ENAME LIKE '_성_';

-- NULL인 값을 찾기 위한 IS NULL   <-> IS NOT NULL
-- 대상 칼럼 IS(연산자) NULL(비교값);

-- 문) COMM이 NULL인 사람 조회
SELECT *
FROM EMP
WHERE COMM IS NULL;
-- WHERE COMM = NULL; // 출력 안됨

-- 문) COMM이 NULL이 아닌 사람 조회
SELECT *
FROM EMP
WHERE COMM IS NOT NULL;

/* 정렬을 위한 ORDER BY 형식 */
-- SELECT * (COLUMN1, COLUMN2, ...)
-- FROM (TABLE_NAME)
-- WHERE (CONDITION)
-- ORDER BY (COLUMN_NAME) [SORTING];

-- ORDER BY 절 다음에는 어떤 칼럼을 기준으로 정렬할 것인지를
-- 결정해야 하기에 칼럼 이름을 기술해야 함
-- 그 다음에는 오름차순으로 정렬(ASC; Ascending)일지, 내림차순(DESC; Descending)일지
-- 정렬방식을 기술해야 함

--      ASC 오름차순,                                   DESC 내림차순
-- 숫자 : 작은 값부터 정렬                              큰 값부터 정렬
-- 문자 : 사전 순서대로 정렬                            사전 역순 정렬
-- 날짜 : 빠른 날짜 순서로 정렬                         최근 날짜부터 정렬
-- NULL : 가장 마지막                                   가장 먼저

-- Q) 급여를 많이 받는 순으로 출력, 급여가 같으면 이름순으로 출력
SELECT *
FROM EMP
ORDER BY SAL DESC, ENAME ASC;

-- Q) 입사날짜가 최근순, 날짜가 같으면 이름순
SELECT *
FROM EMP
ORDER BY HIREDATE DESC, ENAME ASC;

--------QUIZ--------

-- Q1) 급여가 300 이하인 사원의 사원 번호, 사원 이름, 급여 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL <= 300;

-- Q2) 이름이 "오지호"인 사원의 사원 번호, 사원명, 급여 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE ENAME = '오지호';

-- Q3) 급여가 250이거나 300이거나 500인 사원들의 사원 번호와 사원명과 급여 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE SAL IN(250, 300, 500);

-- Q4) 급여가 250, 300, 500이 아닌 사원들 출력
SELECT EMPNO, ENAME, SAL
FROM EMP
WHERE NOT SAL IN(250, 300, 500);

-- Q5) LIKE 연산자와 와일드카드를 사용하여 사원들 중에서 이름이 "김"으로 시작하는 사람과 이름 중에 "기"를 포함하는
-- 사원의 사원 번호와 사원 이름을 출력
SELECT EMPNO, ENAME
FROM EMP
WHERE ENAME LIKE '김%' OR ENAME LIKE '%기%';

-- Q6) 바로 위의 문제와 상관이 없는 사원을 출력
SELECT EMPNO, ENAME
FROM EMP
WHERE NOT ENAME LIKE '김%' AND NOT ENAME LIKE '%기%';

-- Q7) 사원 테이블에서 최근 입사한 직원 순으로 사원 번호, 사원명, 직급, 입사일 칼럼만 출력
SELECT EMPNO, ENAME, JOB, HIREDATE
FROM EMP
ORDER BY HIREDATE DESC;

-- Q8) 부서 번호가 빠른 사원부터 출력하되 같은 부서 내의 사원을 출력할 경우 입사한지 가장 오래된 사원부터 출력
SELECT *
FROM EMP
ORDER BY DEPTNO ASC, HIREDATE ASC;

/* 집합 연산자 */
-- UNION(합집합), MINUS(차집합), INTERSECT(교집합)에서는
-- 입력 테이블과 결과 테이블에서 중복된 레코드가 배제
-- UNION ALL, MINUS ALL, INTERSECT ALL 에서는
-- 입력 테이블과 결과 테이블에 중복된 레코드가 허용
-- 형식 : <쿼리1> 집합연산자1 <쿼리2> 집합연산자2 <쿼리n>

DROP TABLE GROUP_STAR;
DROP TABLE SINGLE_STAR;
--
CREATE TABLE GROUP_STAR(
	NAME		VARCHAR2(50)
);
--
CREATE TABLE SINGLE_STAR(
	NAME		VARCHAR2(50)
);
INSERT INTO GROUP_STAR VALUES('태연');
INSERT INTO GROUP_STAR VALUES('유리');
INSERT INTO GROUP_STAR VALUES('윤아');
INSERT INTO GROUP_STAR VALUES('효연');
INSERT INTO GROUP_STAR VALUES('티파니');
INSERT INTO GROUP_STAR VALUES('제시카');
INSERT INTO GROUP_STAR VALUES('수영');
INSERT INTO GROUP_STAR VALUES('써니');
INSERT INTO GROUP_STAR VALUES('서현');
INSERT INTO GROUP_STAR VALUES('탑');
INSERT INTO GROUP_STAR VALUES('지드래곤');
INSERT INTO GROUP_STAR VALUES('대성');
INSERT INTO GROUP_STAR VALUES('승리');
INSERT INTO GROUP_STAR VALUES('태양');

INSERT INTO SINGLE_STAR VALUES('태연');
INSERT INTO SINGLE_STAR VALUES('지드래곤');
INSERT INTO SINGLE_STAR VALUES('대성');
INSERT INTO SINGLE_STAR VALUES('태양');
INSERT INTO SINGLE_STAR VALUES('아이유');
INSERT INTO SINGLE_STAR VALUES('백지영');
INSERT INTO SINGLE_STAR VALUES('윤종신');
COMMIT;

/* UNION(합집합) */
-- 여러 개의 쿼리 결과를 하나로 합치는 연산자인데, UNION은 중복된 영역을 제외하여 하나로 합치는 연산자.

/* UNION ALL */
-- UNION과 같은 여러 쿼리 결과물에 대한 합집합을 의미, 중복된 영역을 모두 포함시키는 연산자

/* INTERSECT */
-- 여러 개의 SELECT 결과에서 공통된 부분만 결과로 추출
-- 즉, 수행 결과에 대한 교집합

/* MINUS */
-- 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한 나머지 부분만 추출
-- 즉, 두 쿼리 결과물의 차집합

--------------------------------------------------------------------------

-- 그룹 활동과 싱글 활동을 하는 가수 이름을 중복하여 출력
SELECT *
FROM GROUP_STAR
UNION ALL
SELECT *
FROM SINGLE_STAR;
-- 중복된 레코드가 배제됨

-- Q) 그룹 활동과 싱글 활동을 하는 가수 이름을 중복되지 않게 출력
SELECT *
FROM GROUP_STAR
UNION
SELECT *
FROM SINGLE_STAR;

-- Q) 싱글 활동만 하는 가수 이름 출력
SELECT *
FROM SINGLE_STAR
MINUS
SELECT *
FROM GROUP_STAR;

-- Q) 그룹 활동도 하고 싱글 활동도 하는 가수 이름 출력
SELECT *
FROM GROUP_STAR
INTERSECT
SELECT *
FROM SINGLE_STAR;

/* ADD_MONTHS() */ -- 개월수 더하기
SELECT ADD_MONTHS(SYSDATE, 7)
FROM DUAL;

/* NEXT_DAY() */
SELECT NEXT_DAY(SYSDATE, '일요일')
FROM DUAL;
-- 현재 날짜에서 가장 가까운 일요일 출력

/* LAST_DAY() */
SELECT LAST_DAY(SYSDATE)
FROM DUAL;
-- 이 달의 마지막 날 출력

/* MONTHS_BETWEEN(DATE, DATE2) */
-- DATE와 DATE2 날짜 사이의 개월 수를 리턴
SELECT *
FROM EMP
WHERE MONTHS_BETWEEN(SYSDATE, HIREDATE) > 3; 

-- 날짜형 데이터에 숫자 값 연산을 하여 해당 숫자 만큼의 일 수를 연산한 날짜 계산 가능
-- SYSDATE-1 -> 어제
-- SYSDATE   -> 오늘
-- SYSDATE+1 -> 내일
-- SYSDATE+30 -> 오늘로부터 30일 이후의 날짜 리턴


/* 문자열 함수 */
-- (1) CONCAT(CHAR1, CHAR2)
--     - 두 문자열을 연결하여 하나로 만듦

-- (2) || 연산자
--     - CONCAT처럼 문자열을 연결하지만 이건 여러 문자열 연결 가능
--      ('문자열' || '문자열' || '문자열' || ...)

-- (3) INITCAP(CHAR)
--     - 영어 단어의 첫 문자를 대문자로, 공백이나 알파벳이 아닌 문자를 만난 후 다음 첫 알파벳도 대문자로
--      HELLO -> Hello,     pl/sql -> Pl/Sql,       hi hello -> Hi Hello

-- (4) LPAD('문자열', 총 문자 길이, '채울 문자')
--     - 총 문자 길이 만큼의 문자열 공백을 만들고 문자열을 오른쪽 정렬하여 채움, 남는 공간은 채울 문자로
--          LPAD('JDS', 6, '#')  ->  '###JDS'

-- (5) RPAD('문자열', 총 문자 길이, '채울 문자')
--     - LPAD와 방식은 같지만 문자열과 채울 문자 순서가 반대
--      RPAD('JDS', 6, '#')  ->  'JDS###'

-- (6) SUBSTR('문자열', 시작 위치, 추출할 개수)
--     - 문자열의 시작 위치 인덱스부터 추출할 개수 만큼의 문자열을 반환
--       시작 위치 값이 양수일 경우 인덱스는 왼쪽에서 1부터 시작 (JDS = 1 2 3)
--       시작 위치 값이 음수일 경우 인덱스는 오른쪽에서 -1부터 시작 (JDS = -3 -2 -1)
--       만약 추출할 개수를 생략한다면 시작 위치 인덱스부터 나머지 문자열의 끝까지 리턴
--       추출할 개수를 0으로 설정한다면 아무 것도 추출하지 않기 때문에 NULL 리턴
--       시작 위치 인덱스를 O으로 적으면 문자열의 인덱스가 0부터 시작


/* NULL 처리 함수 */
-- (1) NVL(EXPR1, EXPR2)
--     - EXPR1이 NULL을 포함하는 칼럼 표현식을, EXPR2에는 NULL을 대체하는 값을 기술
--     - EXPR1과 EXPR2는 반드시 데이터 타입이 일치해야 함
--     - EXPR1이 NULL 값이면 EXPR2를 리턴, NULL 값이 아니면 EXPR1 값 그대로 리턴
--     - 위의 내용은 아래의 NVL2 함수에도 동일하게 해당

-- (2) NVL2(EXPR1, EXPR2, EXPR3)
--     - EXPR1이 NULL 값이 아닌 경우 EXPR2를, NULL 값이면 EXPR3을 리턴

-- (3) NULLIF(EXPR1, EXPR2)
--     - EXPR1과 EXPR2가 동일한 경우 NULL을, 동일하지 않은 경우 EXPR1을 리턴

-- (4) COALESCE(A1, A2, A3, ..., An)
--     - A1부터 순서대로 탐색해서 NULL이 아닌 첫 번째 값을 가져오고 모두 NULL이면 0(NULL) 리턴
SELECT COALESCE(NULL, NULL, 'a', NULL, 'd', NULL)
FROM DUAL;
-- EXP) 'a'


/* TO_CHAR() */
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD')
FROM DUAL;
-- 현재 날짜가 형식대로 나옴

SELECT TO_CHAR(SYSDATE, 'DAY')
FROM DUAL;
-- EXP) 금요일

SELECT TO_CHAR(SYSDATE, 'DD')
FROM DUAL;
-- EXP) 02(일)

SELECT TO_CHAR(SYSDATE, 'DY')
FROM DUAL;
-- EXP) 금

SELECT TO_CHAR(SYSDATE, 'MM')
FROM DUAL;
-- EXP) 09(월)

SELECT TO_CHAR(SYSDATE, 'MON')
FROM DUAL;
-- EXP) 9월

SELECT TO_CHAR(SYSDATE, 'MI')
FROM DUAL;
-- EXP) 33 (분)


/* NUMBER <--> CHARACTER <--> DATE */

-- 형변환 함수
-- 변환 함수는 자료형을 변환시키고자 할 때 사용하는 형변환 함수
-- TO_NUMBER, TO_CHAR, TO_DATE

-- TO_NUMBER : 문자형을 숫자형으로 변환
-- TO_CHAR : 날짜형 혹은 숫자형을 문자형으로 변환
-- TO_DATE : 문자형을 날짜형으로 변환

/* TO_CHAR */
-- 형식
-- TO_CHAR('날짜 데이터', '출력 형식');
-- 출력 형식
-- YYYY : 년도 4자리(1995)
-- YY : 년도 2자리(95)
-- MM : 월을 숫자로 표현(10)
-- MON : 월을 알파벳으로 표현(OCT)


/* TO_ NUMBER('문자열', '출력 형식'); */
-- 출력 형식의 자리 수와 형식은 바꿀 문자열과 같거나 많아야 함
-- TO_NUMBER('1000', '0000') -> 1000,  TO_NUMBER('1000', '00000') -> ERROR(0은 남는 자리 0으로 표시)
-- TO_NUMBER('1,000', '9,999') -> 1000,  TO_NUMBER('1,000', '99,999') -> 1000(9는 남는 자리 표시 안함)

SELECT TO_NUMBER('1000', '0000')
FROM DUAL;
-- EXP) 1000

SELECT TO_NUMBER('1000', '00000')
FROM DUAL;
-- EXP) ERROR

SELECT TO_NUMBER('1,000', '9,999')
FROM DUAL;
-- EXP) 1000

SELECT TO_NUMBER('1,000', '99,999')
FROM DUAL;
-- EXP) 1000

/* TO_DATE('문자열', '출력 형식') */
-- 문자열의 날짜 형식과 출력 형식의 날짜 형식이 같아야 함
--      TO_DATE('20070402', 'YYYY/MM/DD') -> 07/04/02
--      TO_DATE('2007/04/02', 'yy-mm-DD') -> 07/04/02
--      TO_DATE('0402', 'mm-DD') -> 22/04/02
--      TO_DATE('04-02', 'mm/DD') -> 22/04/02
--      TO_DATE('02', 'YY') -> 02/09/01 (지정 년도 / 현재 월 / 1일)
--      TO_DATE('02', 'MM') -> 22/02/01 (현재 년도 / 지정 월 / 1일)
--      TO_DATE('02', 'DD') -> 22/09/02 (현재 년도 / 현재 월 / 지정 일)
-- 년도 혹은 월을 생략하게 되면 현재 시스템의 년도와 월을 입력하여 날짜를 표시
-- 일을 생략하게 되면 그냥 1일로 표시

SELECT SYSDATE, TO_DATE('2015/03/04', 'YYYY/MM/DD')
FROM DUAL;

-- Q) 특정 자릿수에서 잘라내는 TRUNC()에 대하여 작성하시오
--      12.3456의 값을 아래 출력 결과로 나타내시오
--      12.34   10   12
SELECT TRUNC(12.3456, 2)
FROM DUAL;
-- EXP) 12.34

SELECT TRUNC(12.3456, -1)
FROM DUAL;
-- EXP) 10

SELECT TRUNC(12.3456)
FROM DUAL;
-- EXP) 12

/* CONCAT(CHAR1, CHAR2) */ -- concat : 문자열을 합치는 기능
SELECT CONCAT('Hello', 'bye'), concat('좋은아침', 'bad')
from dual;
-- EXP) Hellobye,  좋은아침bad

SELECT CONCAT('good', 'bad') 좋은아침, 'good' || 'bad' OPERATORS
FROM DUAL;
-- EXP) goodbad,  goodbad

/* INITCAP(CHAR) */
SELECT INITCAP('good morning')
from dual;
-- EXP) Good Morning
-- 첫 문자가 대문자로
-- 공백이나 알파벳이 아닌 문자를 만난 후 다음 첫 알파벳 문자를 대문자로 변환

SELECT INITCAP('good/bad morning')
from dual;
-- EXP) Good/Bad Morning
-- /구분자라서 뒤에 b가 B 대문자로 바뀐다

/* LOWER(CHAR) 소문자, UPPER(CHAR) 대문자 */
SELECT LOWER('GOOD'), UPPER('good')
FROM DUAL;
-- EXP) good, GOOD

/* LPAD(), RPAD() */
-- LPAD : 지정한 길이 만큼 왼쪽부터 특정 문자로 채워준다
-- LPAD('값', '총 문자 길이', '채울 문자')
SELECT LPAD('GOOD', 6) "LPAD1", -- 6자리로 늘림
       LPAD('GOOD', 7, '#') "LPAD2", -- 7자리, 공백은 #으로 채움
       LPAD('GOOD', 8, 'L') "LPAD3" -- 8자리, 공백은 L로 채움
FROM DUAL;
-- EXP) GOOD, ###GOOD, LLLLGOOD

-- RPAD : 지정한 길이 만큼 오른쪽부터 특정 문자로 채워준다
-- RPAD('값', '총 문자 길이', '채울 문자')
SELECT RPAD('GOOD', 6) "RPAD1", -- 6자리로 늘림
       RPAD('GOOD', 7, '#') "RPAD2", -- 7자리, 공백은 #으로 채움
       RPAD('GOOD', 8, 'L') "RPAD3" -- 8자리, 공백은 L로 채움 (한글은 2바이트 차지함)
FROM DUAL;
-- EXP) GOOD, GOOD###, GOODLLLL
